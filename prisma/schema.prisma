// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 番剧作品
model Anime {
  id            Int                   @id @default(autoincrement())
  name          String
  originalName  String?
  summary       String?
  poster        UploadFile?           @relation(fields: [posterFileId], references: [id])
  posterFileId  Int?
  date          String?
  platform      String?
  nsfw          Boolean               @default(false)
  bdrip         Boolean               @default(false)
  createdAt     DateTime              @default(now())
  ratings       Rating[] // 1-n, 来自多个平台的评分
  tags          Tag[]
  episodes      AnimeEpisode[] // 1-n, 此作品的多个剧集
  files         LibFile[] // 1-n, 此作品在所有节点中的所有文件
  userCollects  UserAnimeCollection[]
  viewHistories ViewHistory[]
}

model Tag {
  id     Int       @id @default(autoincrement())
  name   String
  type   TagSource @default(Bangumi)
  animes Anime[]
}

enum TagSource {
  Bangumi
  User
}

// 描述一个动画的集数
model AnimeEpisode {
  id            Int           @id @default(autoincrement())
  episode       String
  anime         Anime         @relation(fields: [animeId], references: [id])
  animeId       Int
  title         String? // 标题
  originalTitle String? // 标题 (原文)
  summary       String? // 简介
  airDate       String? // 放送日期
  duration      Int? // 时长 (秒)
  files         LibFile[] // m-n, 此集数下的所有文件
  viewHistories ViewHistory[]

  @@unique([episode, animeId])
}

// 描述一个库中的文件
model LibFile {
  id            Int            @id @default(autoincrement())
  library       Library        @relation(fields: [libraryId], references: [id])
  libraryId     Int
  anime         Anime?         @relation(fields: [animeId], references: [id])
  animeId       Int?
  path          String         @db.VarChar(512)
  type          FileType       @default(Other)
  createdAt     DateTime       @default(now())
  episodes      AnimeEpisode[] // m-n, 一个文件可能对应多个集数 (如一个视频对应 1-3 集的极端情况)
  viewHistories ViewHistory[]

  @@unique([libraryId, animeId, path])
}

enum FileType {
  Video
  Audio
  Image
  Document
  Subtitle
  CompressedFile
  Other
}

// 描述评分
model Rating {
  id      Int          @id @default(autoincrement())
  anime   Anime        @relation(fields: [animeId], references: [id])
  animeId Int
  source  RatingSource // 评分来源
  score   Float // 评分
  rank    Int? // 在该来源中的排名
  count   Int? // 评分人数

  @@unique([animeId, source])
}

enum RatingSource {
  Bangumi
}

// 描述一个资源库
model Library {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  type        LibraryType   @default(Alist)
  noNSFW      Boolean       @default(false)
  noDownload  Boolean       @default(false)
  files       LibFile[]
  ViewHistory ViewHistory[]
}

// 库的类型
enum LibraryType {
  Alist
  // TODO: Local
}

// 用户上传文件, 如作品图片、头像、评论区图片等
model UploadFile {
  id        Int      @id @default(autoincrement())
  type      FileType
  storage   Storage  @relation(fields: [storageId], references: [id])
  storageId Int
  path      String   @db.VarChar(512)
  createdAt DateTime @default(now())
  animes    Anime[]
}

// 存储用户文件的存储器
model Storage {
  id   Int         @id @default(autoincrement())
  name String
  type StorageType

  UploadFile UploadFile[]
}

// 枚举支持的存储设备
enum StorageType {
  S3
  Local
}

model User {
  id               Int                   @id @default(autoincrement())
  email            String                @unique
  name             String                @unique
  password         String
  encryption       Encryption            @default(Sha256)
  createdAt        DateTime              @default(now())
  settings         Json?
  animeCollections UserAnimeCollection[] // 用户的收藏记录
  inviteCodes      InviteCode[]          @relation(name: "create")
  inviteBy         InviteCode?           @relation(name: "use")
  viewHistories    ViewHistory[]
}

enum Encryption {
  Sha256
}

// 用户追番记录
model UserAnimeCollection {
  id        Int                       @id @default(autoincrement())
  user      User                      @relation(fields: [userId], references: [id])
  userId    Int
  anime     Anime                     @relation(fields: [animeId], references: [id])
  animeId   Int
  status    UserAnimeCollectionStatus @default(Plan)
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
}

enum UserAnimeCollectionStatus {
  Plan
  Watching
  Finished
}

model InviteCode {
  code        String    @id
  createdBy   User?     @relation("create", fields: [createdById], references: [id])
  createdById Int?
  createdAt   DateTime  @default(now())
  usedBy      User?     @relation("use", fields: [usedById], references: [id])
  usedById    Int?      @unique
  usedAt      DateTime?
  expiredAt   DateTime?
}

model Setting {
  key       String   @id
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ViewHistory {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  anime       Anime         @relation(fields: [animeId], references: [id])
  animeId     Int
  file        LibFile       @relation(fields: [libFileId], references: [id])
  libFileId   Int
  episode     AnimeEpisode? @relation(fields: [episodeId], references: [id])
  episodeId   Int?
  currentTime Int?
  totalTime   Int?
  userIP      String?
  watchMethod String?
  library     Library       @relation(fields: [libraryId], references: [id])
  libraryId   Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
